datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  name        String?
  posts       Post[]
  updatedAt   DateTime @updatedAt
}

model Post {
  author               String?
  authorName           String?
  authorProfilePicture String?
  category             Category? @relation(fields: [categoryId], references: [id])
  categoryId           String?
  comments             Comment[]
  content              String?
  createdAt            DateTime  @default(now())
  id                   String    @id @default(cuid())
  likes                Like[]
  mediaItems           Media[]
  title                String?
  updatedAt            DateTime  @updatedAt
}

model Comment {
  author               String?
  authorName           String?
  authorProfilePicture String?
  content              String?
  createdAt            DateTime @default(now())
  id                   String   @id @default(cuid())
  likes                Like[]
  post                 Post?    @relation(fields: [postId], references: [id])
  postId               String?
  updatedAt            DateTime @updatedAt
}

model Like {
  comment   Comment?           @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime           @default(now())
  id        String             @id @default(cuid())
  post      Post?              @relation(fields: [postId], references: [id])
  postId    String?
  typeField EnumLikeTypeField?
  updatedAt DateTime           @updatedAt
  user      User?              @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  createdAt          DateTime                    @default(now())
  email              String?                     @unique
  firstName          String?
  id                 String                      @id @default(cuid())
  lastName           String?
  likes              Like[]
  password           String
  profilePicture     String?
  role               EnumUserRole?
  roles              Json
  updatedAt          DateTime                    @updatedAt
  username           String                      @unique
  verificationStatus EnumUserVerificationStatus?
}

model Media {
  createdAt DateTime            @default(now())
  id        String              @id @default(cuid())
  mediaType EnumMediaMediaType?
  mediaUrl  String?
  post      Post?               @relation(fields: [postId], references: [id])
  postId    String?
  updatedAt DateTime            @updatedAt
}

enum EnumLikeTypeField {
  Option1
}

enum EnumUserRole {
  Option1
}

enum EnumUserVerificationStatus {
  Option1
}

enum EnumMediaMediaType {
  Option1
}
